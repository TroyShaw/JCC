This document describes at a high level all the tasks involved in creating JCC.
It also details what has been done, and what is yet to do.

Key
===

x - task name
o - task name
* - task name

* - denotes the task is yet to be started
o - denotes the task has been completed
x - denotes the task is in the process of being finished

Preprocessing
=============

o - trigraphs
x - digraphs
x - main preprocessing directives (to outline later)

Lexing
======

* - token OO representation
        still need to represent all the different language elements (constant modifiers, etc)

o - punctuators tokens

o - Keywords, Identifiers

* - numerical literals
    * - integer
    * - floating
        * - octal
        * - hexidecimal
        * - integer

o - string literal

x - char literals
        still need to support hex/ numerical values inside chars
        still need to support unicode

o - all escape sequences supported (\n, \t, \b, etc)

* - write tests
* - tidy up code, refactor, document

Parsing
=======

x - Convert List<Token> to AST


Type Checking
===============

to outline later


Optimisation
============

constant folding
rest to outline later


Code Generation
===============

Decide what platform to output for. Also what target. LLVM? GCC AT&T assembly?


Standard Library
================

Do I write it from scratch or reuse a FOS implementation?
